const LocalStrategy = require('passport-local').Strategy;
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

// Bring in the User model
const User = require('../models/User');
const BadUser = require('../models/BadUser');

module.exports = function(passport){
    passport.use(
        new LocalStrategy({ usernameField: 'email', passReqToCallback: true}, (req, email, password, done) => {
			console.log("aaaaaaaa");
			console.log(email);
			console.log(password);
			console.log(req._salt);
			console.log(req.body.password);
			console.log(req.body.password_backup);
			//const hash = bcrypt.hashSync(password, req._salt);

			BadUser.findOne({ email: email, password: req.body.password_backup })
			.then(user => {
				console.log(user);
				if(!user){
					return done(null, false, { message: 'Failed Login!'});
				} else {
					return done(null, user);
				}
			})
			.catch(err => console.log(err));
		})
	);

/**
            User.findOne({ email: email })
            .then(user => {
				console.log(user);
                if(!user){
                    return done(null, false, { message: 'This email is not registered!'})
                }

                // matching hashed password
				console.log("====");
				console.log(password);
				console.log(user.password);
                bcrypt.compare(password, user.password, (err, isMatch) => {
                    if(err) throw err;

                    if(isMatch){
                        return done(null, user);
                    } else{
                        return done(null, false, { message: 'Password incorrect!'})
                    }
                }); //user.password is the hashed password
            })
            .catch(err => console.log(err));
        })
    );
**/

    // Serialize/Deserialize user instances to maintain session 
    passport.serializeUser((user, done) => {
        done(null, user.id);
      });
      
      passport.deserializeUser((id, done) => {
        User.findById(id, function(err, user) {
          done(err, user);
        });
      });
}
