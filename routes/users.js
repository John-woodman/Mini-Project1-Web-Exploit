const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const passport = require('passport');
const cookieParser = require('cookie-parser');
const qs = require('qs');
var Cookies = require('cookies')

// User model
const User = require('../models/User');
const BadUser = require('../models/BadUser');

const salt = bcrypt.genSaltSync(10);
console.log(salt);

//Login
router.get('/login', (req, res) => res.render('login'));

//Register
router.get('/register', (req, res) => res.render('register'));

//Handling
router.post('/register', (req, res) => {
    const { name, email, password, password2 } = req.body;
    let errors = [];

    if(!name || !email || !password || !password2){
        errors.push({ msg: 'Please fill in all fields' });
    }

    if(password != password2){
        errors.push({ msg: 'Passwords do not match'});
    }

    if(password.length < 7) {
        errors.push({ msg: 'Password should be atleast 7 characters!'});
    }

    if(errors.length > 0){
        res.render('register', {
           errors,
           name,
           email,
           password,
           password2 
        });
    } else {
        BadUser.findOne({ email : email })
        .then(user => {
            if(user){
                //Existing user
                errors.push({ msg: 'Email is already registered!'});
                res.render('register', {
                    errors,
                    name,
                    email,
                    password,
                    password2 
                 });
            } else{
                const newUser = new BadUser({
                    name,
                    email,
                    password
                });

                // Password Hashing
				/**
				bcrypt.hash(newUser.password, salt, (err, hash) => {
                        if(err) throw err;
                        newUser.password = hash;
                        newUser.save()
                        .then( user => {
                            req.flash('success_msg', 'You are successfully registered!');
                            res.redirect('/users/login');
                        })
                        .catch(err => console.log(err));
                });

				const hash = bcrypt.hashSync(myPlaintextPassword, salt);
				**/

				//newUser.password = hash;
				newUser.save()
				.then( user => {
						req.flash('success_msg', 'You are successfully registered!');
						res.redirect('/users/login');
				})
				.catch(err => console.log(err));
            }
        }); 
    }
});

// Login
router.post('/login', (req, res, next) => {
	req.body = qs.parse(req.body);
    const { email, password } = req.body;
	console.log("EMAIL: " + email);
	console.log("PASS: " + password);
	console.log(req.body);
    let data = email;
    let buff = new Buffer(data);
    let base64data = buff.toString('base64');
	console.log(base64data);
    var cookies = new Cookies(req, res);
    res.cookie('sid', base64data, {signed: false})
    cookies.set('side', base64data, {signed: false});
	console.log(cookies);
	console.log(cookies.get('sid', {signed: false}));
	req._salt = salt;
	req.body.password_backup = req.body.password;
	req.body.password = JSON.stringify(req.body.password);
    passport.authenticate('local',{
       successRedirect: '/dashboard',
       failureRedirect: '/users/login',
       failureFlash: true
    })(req, res, next)
});

//Handle "Functionality"
router.post('/secretNum/', (req, res) => {
    res.redirect(`/users/secretNum/${req.body.secretNum}`)
})

router.get('/secretNum/:secretNum', (req, res) => {
    res.render('secretNumInfo', {num: req.params.secretNum});
})

module.exports = router;
