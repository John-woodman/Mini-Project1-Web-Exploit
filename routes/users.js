const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const passport = require('passport');
const cookieParser = require('cookie-parser');
var Cookies = require('cookies')

let xor_key = 'qovasd8wdx';

function xor_strings(data, key){
	let length = data.length;
	let new_key = key.repeat((length / 10) + 1);
	let ctxt = '';
	for (let i = 0; i < length; i++) {
		ctxt += String.fromCharCode(data[i].charCodeAt(0).toString(10) ^ new_key[i].charCodeAt(0).toString(10));
	}
	return ctxt;
}

// User model
const User = require('../models/User');

//Login
router.get('/login', (req, res) => res.render('login'));

//Register
router.get('/register', (req, res) => res.render('register'));

//Handling
router.post('/register', (req, res) => {
    const { name, email, password, password2 } = req.body;
    let errors = [];

    if(!name || !email || !password || !password2){
        errors.push({ msg: 'Please fill in all fields' });
    }

    if(password != password2){
        errors.push({ msg: 'Passwords do not match'});
    }

    if(password.length < 7) {
        errors.push({ msg: 'Password should be atleast 7 characters!'});
    }

    if(errors.length > 0){
        res.render('register', {
           errors,
           name,
           email,
           password,
           password2 
        });
    } else {
        User.findOne({ email : email })
        .then(user => {
            if(user){
                //Existing user
                errors.push({ msg: 'Email is alreayd registered!'});
                res.render('register', {
                    errors,
                    name,
                    email,
                    password,
                    password2 
                 });
            } else{
                const newUser = new User({
                    name,
                    email,
                    password
                });

                // Password Hashing
                bcrypt.genSalt(10, (err, salt) => 
                    bcrypt.hash(newUser.password, salt, (err, hash) => {
                        if(err) throw err;
                        newUser.password = hash;
                        newUser.save()
                        .then( user => {
                            req.flash('success_msg', 'You are successfully registered!');
                            res.redirect('/users/login');
                        })
                        .catch(err => console.log(err));
                    }))
            }
        }); 
    }
});

// Login
router.post('/login', (req, res, next) => {
    const { email, password } = req.body;
    let data = email;
    let buff = new Buffer(data);
    let base64data = buff.toString('base64');
	buff = new Buffer(base64data);
	base64data = buff.toString('base64');
	buff = new Buffer(xor_strings(base64data, xor_key));
	base64data = buff.toString('base64');
    var cookies = new Cookies(req, res);
    res.cookie('sid', base64data, {signed: false})
    cookies.set('side', base64data, {signed: false});
    passport.authenticate('local',{
       successRedirect: '/dashboard',
       failureRedirect: '/users/login',
       failureFlash: true
    })(req, res, next)
});

//Handle "Functionality"
router.post('/secretNum/', (req, res) => {
    res.redirect(`/users/secretNum/${req.body.secretNum}`)
})

router.get('/secretNum/:secretNum', (req, res) => {
    var cookies = new Cookies(req, res);
    let data = cookies.get('sid').toString();
    let buff = new Buffer(data, 'base64');
    let sesh = buff.toString('ascii');
	let d2 = xor_strings(sesh, xor_key);
	buff = new Buffer(d2, 'base64');
	sesh = buff.toString('ascii');
	buff = new Buffer(sesh, 'base64');
	sesh = buff.toString('ascii');
    //console.log(sesh)
    console.log(sesh);
    if (sesh == 'admin@hotmail.com' && req.params.secretNum == 0) {
        res.render('secretNumInfo', {num: req.params.secretNum})
    }
    else if (sesh != 'admin@hotmail.com' && req.params.secretNum == 0) {
        res.render('secretNumInfo', {num: -1})
    }
    else if (req.params.secretNum < 0) {
        res.render('secretNumInfo', {num: -2})
    }
    else {
        res.render('secretNumInfo', {num: req.params.secretNum})
    }
})

module.exports = router;
